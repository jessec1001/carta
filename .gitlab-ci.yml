default:
  image: mcr.microsoft.com/dotnet/sdk:5.0

cache:
  paths:
    - $HOME/.npm/

stages:
  - build
  - test
  - docs
  - deploy

build:
  stage: build
  script:
    - curl -sL https://deb.nodesource.com/setup_current.x | bash -
    - apt-get install -y nodejs
    - cd CartaWeb/ClientApp/
    - npm ci --cache $HOME/.npm --prefer-offline
    - cd ../../
    - dotnet build --configuration Release

publish-staging:
  stage: build
  only:
    - dev-v1.0.0rc1
  except:
    - tags
  artifacts:
    paths:
      - package.zip
  script:
    - curl -sL https://deb.nodesource.com/setup_current.x | bash -
    - apt-get install -y nodejs
    - apt-get install -y zip unzip
    - npm install -g aws-cdk
    - mkdir ~/.aws 
    - echo "[default]" > ~/.aws/config 
    - echo "region = $AWS_DEFAULT_REGION"  >> ~/.aws/config 
    - echo "[default]" > ~/.aws/credentials
    - echo "aws_access_key_id = $STAGING_AWS_ACCESS_KEY_ID"  >> ~/.aws/credentials
    - echo "aws_secret_access_key = $STAGING_AWS_SECRET_ACCESS_KEY"  >> ~/.aws/credentials
    - cdk deploy ResourceStack --outputs-file CartaWeb/appsettings.CDK.json
    - dotnet publish --configuration Release CartaWeb/ -o package
    - cp -r .platform/ package/
    - cd package
    - zip -r ../package.zip .

publish-production:
  stage: build
  only:
    - tags
  artifacts:
    paths:
      - package.zip
  script:
    - curl -sL https://deb.nodesource.com/setup_current.x | bash -
    - apt-get install -y nodejs
    - apt-get install -y zip unzip
    - npm install -g aws-cdk
    - mkdir ~/.aws 
    - echo "[default]" > ~/.aws/config 
    - echo "region = $AWS_DEFAULT_REGION"  >> ~/.aws/config 
    - echo "[default]" > ~/.aws/credentials
    - echo "aws_access_key_id = $PRODUCTION_AWS_ACCESS_KEY_ID"  >> ~/.aws/credentials
    - echo "aws_secret_access_key = $PRODUCTION_AWS_SECRET_ACCESS_KEY"  >> ~/.aws/credentials
    - cdk deploy ResourceStack --outputs-file CartaWeb/appsettings.CDK.json
    - dotnet publish --configuration Release CartaWeb/ -o package
    - cp -r .platform/ package/
    - cd package
    - zip -r ../package.zip .

test:
  variables:
    DYNAMODB_LOCAL_HOSTNAME: "dynamodb-local"
  stage: test
  services:
    - name: amazon/dynamodb-local
      alias: dynamodb-local
  artifacts:
    paths:
      - coverage.lcov
  script:
    - >
      dotnet test --configuration Release
      /p:CollectCoverage=true
      /p:CoverletOutputFormat=lcov
      /p:CoverletOutput='../coverage.lcov'
    - curl -sL https://deb.nodesource.com/setup_current.x | bash -
    - apt-get install -y nodejs
    - cd CartaWeb/ClientApp/
    - npm install
    - npm test

docs-coverage:
  stage: docs
  only:
    - dev-v1.0.0rc1
  dependencies:
    - test
  artifacts:
    untracked: true
  script:
    - dotnet tool install -g dotnet-reportgenerator-globaltool
    - export PATH=$PATH:$HOME/.dotnet/tools
    - . ~/.bashrc
    - reportgenerator

docs-projects:
  image: erothejoker/docker-docfx:latest
  stage: docs
  only:
    - dev-v1.0.0rc1
  dependencies:
    - build
  artifacts:
    paths:
      - docfx_project/_site
  script:
    - docfx docfx_project/docfx.json

pages:
  stage: deploy
  only:
    - dev-v1.0.0rc1
  dependencies:
    - docs-projects
    - docs-coverage
  artifacts:
    paths:
      - public
  script:
    - mv docfx_project/_site public/
    - mv coverage/ public/coverage/

deploy-staging:
  stage: deploy
  only:
    - dev-v1.0.0rc1
  except:
    - tags
  dependencies:
    - publish-staging
  script:
    - curl -sL https://deb.nodesource.com/setup_current.x | bash -
    - apt-get install -y nodejs
    - npm install -g aws-cdk
    - mkdir ~/.aws 
    - echo "[default]" > ~/.aws/config 
    - echo "region = $AWS_DEFAULT_REGION"  >> ~/.aws/config 
    - echo "[default]" > ~/.aws/credentials
    - echo "aws_access_key_id = $STAGING_AWS_ACCESS_KEY_ID"  >> ~/.aws/credentials
    - echo "aws_secret_access_key = $STAGING_AWS_SECRET_ACCESS_KEY"  >> ~/.aws/credentials
    - COMMIT_SHA=`echo $CI_COMMIT_SHA | cut -c1-8`
    - mv package.zip package-$COMMIT_SHA.zip
    - cdk deploy ElasticBeanstalkStack --context commitSHA=$COMMIT_SHA

deploy-production:
  stage: deploy
  only:
    - tags
  dependencies:
    - publish-production
  script:
    - curl -sL https://deb.nodesource.com/setup_current.x | bash -
    - apt-get install -y nodejs
    - npm install -g aws-cdk
    - mkdir ~/.aws 
    - echo "[default]" > ~/.aws/config 
    - echo "region = $AWS_DEFAULT_REGION"  >> ~/.aws/config 
    - echo "[default]" > ~/.aws/credentials
    - echo "aws_access_key_id = $PRODUCTION_AWS_ACCESS_KEY_ID"  >> ~/.aws/credentials
    - echo "aws_secret_access_key = $PRODUCTION_AWS_SECRET_ACCESS_KEY"  >> ~/.aws/credentials
    - COMMIT_SHA=`echo $CI_COMMIT_SHA | cut -c1-8`
    - mv package.zip package-$COMMIT_SHA.zip
    - cdk deploy ElasticBeanstalkStack --context commitSHA=$COMMIT_SHA
