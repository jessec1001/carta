default:
  image: mcr.microsoft.com/dotnet/sdk:5.0

cache:
  paths:
    - $HOME/.npm/

stages:
  - publish
  - test
  - docs
  - deploy

variables:
  AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY
  BRANCH: CU-2bfqpc9_Medium-Python-post-deployment-script-causes-deployment-errors_Michelle-Daya
# TODO: revert 
# AWS_ACCESS_KEY_ID: $STAGING_AWS_ACCESS_KEY_ID
# AWS_SECRET_ACCESS_KEY: $STAGING_AWS_SECRET_ACCESS_KEY

workflow:
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        AWS_ACCESS_KEY_ID: $PRODUCTION_AWS_ACCESS_KEY_ID
        AWS_SECRET_ACCESS_KEY: $PRODUCTION_AWS_SECRET_ACCESS_KEY
    - when: always

publish:
  stage: publish
  rules:
    - if: $CI_COMMIT_BRANCH == $BRANCH
    # TODO: revert
    # - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  artifacts:
    paths:
      - package.zip
  script:
    - curl -sL https://deb.nodesource.com/setup_current.x | bash -
    - apt-get install -y nodejs
    - apt-get install -y zip unzip
    - npm install -g aws-cdk
    - mkdir ~/.aws 
    - echo "[cdk]" > ~/.aws/config 
    - echo "region = $AWS_DEFAULT_REGION"  >> ~/.aws/config 
    - echo "[cdk]" > ~/.aws/credentials
    - echo "aws_access_key_id = $AWS_ACCESS_KEY_ID"  >> ~/.aws/credentials
    - echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY"  >> ~/.aws/credentials
    - cdk deploy ResourceStack --profile cdk --outputs-file CartaWeb/appsettings.CDK.json
    - dotnet publish --configuration Release CartaWeb/ -o package
    - cp -r .platform/ package/
    - cd package
    - zip -r ../package.zip .

test:
  variables:
    DYNAMODB_LOCAL_HOSTNAME: "dynamodb-local"
  stage: test
  services:
    - name: amazon/dynamodb-local
      alias: dynamodb-local
  artifacts:
    paths:
      - coverage.lcov
  script:
    - curl -sL https://deb.nodesource.com/setup_current.x | bash -
    - apt-get install -y nodejs
    - >
      dotnet test 
      /p:CollectCoverage=true
      /p:CoverletOutputFormat=lcov
      /p:CoverletOutput='../coverage.lcov'
    - cd CartaWeb/ClientApp/
    - npm install
    - npm test

docs-coverage:
  stage: docs
  rules:
    - if: $CI_COMMIT_BRANCH == $BRANCH
    # TODO: revert
    # - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - test
  artifacts:
    untracked: true
  script:
    - dotnet tool install -g dotnet-reportgenerator-globaltool
    - export PATH=$PATH:$HOME/.dotnet/tools
    - . ~/.bashrc
    - reportgenerator

docs-projects:
  image: erothejoker/docker-docfx:latest
  stage: docs
  rules:
    - if: $CI_COMMIT_BRANCH == $BRANCH
    # TODO: revert
    # - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - publish
  artifacts:
    paths:
      - docfx_project/_site
  script:
    - docfx docfx_project/docfx.json

pages:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $BRANCH
    # TODO: revert
    # - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - docs-projects
    - docs-coverage
  artifacts:
    paths:
      - public
  script:
    - mv docfx_project/_site public/
    - mv coverage/ public/coverage/

deploy:
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == $BRANCH
    # TODO: revert
    # - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  dependencies:
    - publish
  script:
    - curl -sL https://deb.nodesource.com/setup_current.x | bash -
    - apt-get install -y nodejs
    - npm install -g aws-cdk
    - mkdir ~/.aws 
    - echo "[cdk]" > ~/.aws/config 
    - echo "region = $AWS_DEFAULT_REGION"  >> ~/.aws/config 
    - echo "[cdk]" > ~/.aws/credentials
    - echo "aws_access_key_id = $AWS_ACCESS_KEY_ID"  >> ~/.aws/credentials
    - echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY"  >> ~/.aws/credentials
    - COMMIT_SHA=`echo $CI_COMMIT_SHA | cut -c1-8`
    - mv package.zip package-$COMMIT_SHA.zip
    - cdk deploy ElasticBeanstalkStack --profile cdk --context commitSHA=$COMMIT_SHA --no-rollback
