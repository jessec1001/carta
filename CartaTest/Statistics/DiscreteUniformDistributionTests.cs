using System;
using System.Collections.Generic;

using NUnit.Framework;

using CartaCore.Statistics;

namespace CartaTest.Statistics
{
    /// <summary>
    /// Tests the <see cref="DiscreteUniformDistribution"/> class at generation of random values.
    /// </summary>
    [TestFixture]
    public class DiscreteUniformDistributionTests
    {
        /// <summary>
        /// The minimum value of the test distribution.
        /// </summary>
        protected static int DistributionMinimum = 3;
        /// <summary>
        /// The maximum value of the test distribution.
        /// </summary>
        protected static int DistributionMaximum = 7;

        /// <summary>
        /// The number of samples to test the distribution on.
        /// </summary>
        protected static int SampleCount = 10000;

        /// <summary>
        /// The error threshold to test computed statistics against.
        /// </summary>
        protected static double ErrorThreshold = 0.05;

        /// <summary>
        /// The samples generated by the test.
        /// </summary>
        protected List<int> Samples;

        /// <summary>
        /// The test distribution to generate samples from.
        /// </summary>
        protected IIntegerDistribution Distribution;

        /// <summary>
        /// Sets up the test fixture by generating samples from the test distribution.
        /// </summary>
        [SetUp]
        public void SetUp()
        {
            // Create a random number generator.
            Random random = new Random();

            // Create the distribution and samples.
            Distribution = new DiscreteUniformDistribution
            (
                DistributionMinimum,
                DistributionMaximum
            );
            Samples = new List<int>(SampleCount);
            for (int index = 0; index < SampleCount; index++)
                Samples.Add(Distribution.Sample(random));
        }

        /// <summary>
        /// Tests that samples are generated in the correct range.
        /// </summary>
        [Test]
        public void TestSampleRange()
        {
            for (int index = 0; index < SampleCount; index++)
            {
                Assert.IsTrue(DistributionMinimum <= Samples[index]);
                Assert.IsTrue(DistributionMaximum >= Samples[index]);
            }
        }

        /// <summary>
        /// Tests that the calculated mean approximates the exact mean of the distribution.
        /// </summary>
        [Test]
        public void TestMean()
        {
            double mean = 0;
            for (int index = 0; index < SampleCount; index++)
                mean += (double)Samples[index] / SampleCount;

            Assert.AreEqual(Distribution.Mean, mean, ErrorThreshold * Distribution.Mean);
        }

        /// <summary>
        /// Tests that the calculated variance approximates the exact variance of the distribution.
        /// </summary>
        [Test]
        public void TestVariance()
        {
            double variance = 0;
            for (int index = 0; index < SampleCount; index++)
                variance += (double)(Math.Pow(Distribution.Mean - Samples[index], 2)) / (SampleCount - 1);

            Assert.AreEqual(Distribution.Variance, variance, ErrorThreshold * Distribution.Variance);
        }
    }
}